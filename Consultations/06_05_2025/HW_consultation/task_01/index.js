// –ú–µ—Ç–æ–¥—ã –º–∞—Å—Å–∏–≤–æ–≤ –≤ JavaScript
// üîπ 1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞
// –ó–∞–¥–∞–Ω–∏–µ:
// –°–æ–∑–¥–∞–π –º–∞—Å—Å–∏–≤ fruits —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ ["apple", "banana"] . –î–æ–±–∞–≤—å –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞
// —Å—Ç—Ä–æ–∫—É "orange" —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ push .
// –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
// ["apple", "banana", "orange"]

const fruits = ["apple", "banana"];
fruits.push("orange");
console.log(fruits); //[ 'apple', 'banana', 'orange' ]

/**
 * 2. –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
–ó–∞–¥–∞–Ω–∏–µ:
–î–∞–Ω –º–∞—Å—Å–∏–≤ numbers = [10, 20, 30, 40] . –£–¥–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ —Å 
–ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ pop .
–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
[10, 20, 30]
 */

const numbers = [10, 20, 30, 40];
numbers.pop(3);
console.log(numbers); //[ 10, 20, 30 ]

/**
 * –ó–∞–¥–∞–Ω–∏–µ:
–°–æ–∑–¥–∞–π –º–∞—Å—Å–∏–≤ colors = ["blue", "green"] . –î–æ–±–∞–≤—å –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫—É "red" —Å 
–ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ unshift .

–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
["red", "blue", "green"]
 */

const colors = ["blue", "green"];
colors.unshift("red");
console.log(colors); //[ 'red', 'blue', 'green' ]

/**
 * 4. –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞
–ó–∞–¥–∞–Ω–∏–µ:
–î–∞–Ω –º–∞—Å—Å–∏–≤ days = ["Monday", "Tuesday", "Wednesday"] . –£–¥–∞–ª–∏ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å 
–ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ shift .
–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
["Tuesday", "Wednesday"]
 */

const days = ["Monday", "Tuesday", "Wednesday"];
days.shift(0);
console.log(days); // [ 'Tuesday', 'Wednesday' ]

/**
 * 5. –ù–∞–π–¥–∏ –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞
–ó–∞–¥–∞–Ω–∏–µ:
–î–∞–Ω –º–∞—Å—Å–∏–≤ cities = ["Paris", "London", "Berlin", "Madrid"] . –ù–∞–π–¥–∏ –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ "Berlin" —Å 
–ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ indexOf .
–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
2
 */

const cities = ["Paris", "London", "Berlin", "Madrid"];
const idxOfBerlin = cities.indexOf("Berlin");
console.log(idxOfBerlin); //2

/**
 * 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
–ó–∞–¥–∞–Ω–∏–µ:
–î–∞–Ω –º–∞—Å—Å–∏–≤ nums = 1, 2, 3, 4 . –ü—Ä–æ–≤–µ—Ä—å, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ —á–∏—Å–ª–æ 3 —Å 
–ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ includes .
–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
true
 */

const nums = [1, 2, 3, 4];
const isNumberThree = nums.includes(3);
console.log(isNumberThree); //true

/**
 * 7. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞
–ó–∞–¥–∞–Ω–∏–µ:
–î–∞–Ω –º–∞—Å—Å–∏–≤ letters = ["a", "b", "c", "d", "e"] . –ü–æ–ª—É—á–∏ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ "b", "c", 
"d" —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ slice .
–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
["b", "c", "d"]
 */

const letters = ["a", "b", "c", "d", "e"];
const newLetters = letters.slice(1, 4);
console.log(newLetters); //[ 'b', 'c', 'd' ]

/**
 * 8. –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é splice
–ó–∞–¥–∞–Ω–∏–µ:
–î–∞–Ω –º–∞—Å—Å–∏–≤ nums = 5, 10, 15, 20 . –£–¥–∞–ª–∏ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –Ω–∞—á–∏–Ω–∞—è —Å –∏–Ω–¥–µ–∫—Å–∞ 1 —Å 
–ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ splice .
–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
5, 15, 20
 */

const nums1 = [5, 10, 15, 20];
nums1.splice(1, 1);
console.log(nums1); //[ 5, 15, 20 ]

/**
 * –í—Å—Ç–∞–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é splice
–ó–∞–¥–∞–Ω–∏–µ:
–í –º–∞—Å—Å–∏–≤ animals = ["cat", "dog"] –≤—Å—Ç–∞–≤—å —ç–ª–µ–º–µ–Ω—Ç "parrot" –Ω–∞ –∏–Ω–¥–µ–∫—Å 1 —Å –ø–æ–º–æ—â—å—é 
–º–µ—Ç–æ–¥–∞ splice .
–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
["cat", "parrot", "dog"]
 */

const animals = ["cat", "dog"];
animals.splice(1, 0, "parrot");
console.log(animals); // [ 'cat', 'parrot', 'dog'

/**
 * 10. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —á–∏—Å–µ–ª
–ó–∞–¥–∞–Ω–∏–µ:
–î–∞–Ω –º–∞—Å—Å–∏–≤ numbers = 40, 10, 100, 30 . –û—Ç—Å–æ—Ä—Ç–∏—Ä—É–π –º–∞—Å—Å–∏–≤ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Å 
–ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ sort .
–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
10, 30, 40, 100
 */

const numbers1 = [40, 10, 100, 30];
numbers1.sort((a, b) => a - b);
console.log(numbers1); // [ 10, 30, 40, 100 ]

/**
 * 11. –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
–ó–∞–¥–∞–Ω–∏–µ:
–î–∞–Ω –º–∞—Å—Å–∏–≤ arr = 1, 2, 3, 4 . –°–¥–µ–ª–∞–π —Ç–∞–∫, —á—Ç–æ–±—ã —ç–ª–µ–º–µ–Ω—Ç—ã —à–ª–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º 
–ø–æ—Ä—è–¥–∫–µ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ reverse .
–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
4, 3, 2, 1
 */

const arr = [1, 2, 3, 4];
arr.reverse();
console.log(arr);

/**
 * 12. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
–ó–∞–¥–∞–Ω–∏–µ:

–ú–µ—Ç–æ–¥—ã –º–∞—Å—Å–∏–≤–æ–≤ –≤ JavaScript 3


–°–æ–∑–¥–∞–π –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞: a = 1, 2 –∏ b = 3, 4 . –û–±—ä–µ–¥–∏–Ω–∏ –∏—Ö –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤ —Å 
–ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ concat .
–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
1, 2, 3, 4
 */

const a = [1, 2];
const b = [3, 4];
const ab = a.concat(b);
console.log("ab: ", ab); //[ 1, 2, 3, 4 ]

/**
 * 13. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –≤ —Å—Ç—Ä–æ–∫—É
–ó–∞–¥–∞–Ω–∏–µ:
–î–∞–Ω –º–∞—Å—Å–∏–≤ letters = ["a", "b", "c"] . –ü—Ä–µ–æ–±—Ä–∞–∑—É–π –µ–≥–æ –≤ —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å —Å 
–ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ join .
–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
"a-b-c"
 */

const letters1 = ["a", "b", "c"];
const str = letters1.join("-");
console.log(str); // a-b-c

/**
 * 14. –ü–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞
–ó–∞–¥–∞–Ω–∏–µ:
–î–∞–Ω –º–∞—Å—Å–∏–≤ arr = [1, 2, 3, 2, 1] . –ù–∞–π–¥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ 2 —Å –ø–æ–º–æ—â—å—é 
–º–µ—Ç–æ–¥–∞ lastIndexOf .
–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
3
 */

const arr1 = [1, 2, 3, 2, 1];
const lastIndexOfTwo = arr1.lastIndexOf(2);
console.log(lastIndexOfTwo); // 3

/**
 * 15. –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ü–∏–∫–ª
–ó–∞–¥–∞–Ω–∏–µ:
–î–∞–Ω –º–∞—Å—Å–∏–≤ arr = [1, 2, 3] . –£–¥–∞–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É, –∏—Å–ø–æ–ª—å–∑—É—è pop –≤ 
—Ü–∏–∫–ª–µ.
–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
–ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤: []
 */

const arr2 = [1, 2, 3, 4, 5, 6, 7, 8];
for (let i = arr2.length - 1; i >= 0; i--) {
  arr2.pop();
}
console.log(arr2); // []

/**
 * 16. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞
–ó–∞–¥–∞–Ω–∏–µ:
–°–∫–æ–ø–∏—Ä—É–π –º–∞—Å—Å–∏–≤ a = [5, 10, 15] –≤ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ b —Å –ø–æ–º–æ—â—å—é slice .
–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:

b = 5, 10, 15 (–Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è –∫–æ–ø–∏—è)
 */

const a1 = [5, 10, 15];
const b1 = a1.slice(0, 3);
console.log(a1); //[ 5, 10, 15 ]
console.log(b1); // [ 5, 10, 15 ]

/**
 * 7. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
–ó–∞–¥–∞–Ω–∏–µ:
–°–æ–∑–¥–∞–π –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ a = [1, 2, 3] –∏ b = a.slice() . –ò–∑–º–µ–Ω–∏ b[0] –Ω–∞ 99 . –ü–æ–∫–∞–∂–∏, —á—Ç–æ a 
–Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è.
–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
a = [1, 2, 3] , b = [99, 2, 3]
 */

const a2 = [1, 2, 3];
const b2 = a2.slice();
b2.splice(0, 1, 99);
console.log(a2); // [ 1, 2, 3 ]
console.log(b2); // [ 99, 2, 3 ]

/**
 *  18. –ù–∞–π–¥–∏ —Å—É–º–º—É —á–∏—Å–µ–ª
–ó–∞–¥–∞–Ω–∏–µ:
–î–∞–Ω –º–∞—Å—Å–∏–≤ nums = [10, 20, 30] . –ò—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª, –Ω–∞–π–¥–∏ —Å—É–º–º—É –≤—Å–µ—Ö —á–∏—Å–µ–ª –º–∞—Å—Å–∏–≤–∞.
–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
60
 */
let sum = 0;
const nums2 = [10, 20, 30];
// for (let i = 0; i < nums2.length; i++) {
//   sum += nums2[i];
// }
nums2.forEach(num => sum += num);
// const sum = nums2.reduce((acc, num) => acc + num, 0);

console.log(sum); // 60
